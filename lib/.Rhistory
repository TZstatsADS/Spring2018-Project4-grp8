c_hat <- sign(label)
return(c_hat)
}
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
# cv
for (i in seq(k)) {
# split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
# cv training error
c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
# cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
# training error: mean cv test error
train_error[B] <- mean(test_error_cv)
# test error
ada <- adaBoost(Xtrain, ytrain, B)
alpha <- ada$alpha
allPars <- ada$allPars
c_hat_test <- agg_class(Xtest, alpha, allPars)
test_error[B] <- mean(ytest != c_hat_test)
}
x = seq(3)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
#cv
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
#cv training error
#c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
#train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
#cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
#training error: mean cv test error
train_error[B] <- mean(test_error_cv)
#test error
c_hat_test <- agg_class(Xtest, alpha[1:B,], allPars[1:B,])
test_error[B] <- mean(ytest != c_hat_test)
}
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
#cv
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
#cv training error
#c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
#train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
#cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
#training error: mean cv test error
train_error[B] <- mean(test_error_cv)
#test error
c_hat_test <- agg_class(Xtest, alpha[1:B], allPars[1:B])
test_error[B] <- mean(ytest != c_hat_test)
}
a = matrix(c(1,2,3,4),2,2)
a
mean(a)
colMeans(a)
rowMeans(a)
B_max = 10
#5-fold cv
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error_cv <- matrix(NA, nrow = B_max, ncol = k)
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B_max)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
for(B in 1:B_max){
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv[1:B], allPars_cv[1:B])
train_error_cv[B,i] <- mean(ytest_cv != c_hat_test_cv)
}
}
#training error: mean cv test error
train_error <- rep(NA, B_max)
train_error <- rowMeans(test_error_cv)
train_error_cv
train_error <- rep(NA, B_max)
train_error <- rowMeans(train_error_cv)
train_error
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
c_hat_test <- agg_class(Xtest, alpha[1:B], allPars[1:B])
test_error[B] <- mean(ytest != c_hat_test)
}
x = seq(100)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
x = seq(10)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
lines(x, test_error, col="red")
legend("topright", c("training error", "testing error"), lty=c(1,1), col=c("blue", "red"))
df <- movie_test
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
ms_mat <- function(df){
case <- df[df$V1=="C",2]
vote <- sort(unique(df[df$V1=="V",2]))
mat <- matrix(0, nrow=length(case), ncol=length(vote))
rownames(mat) <- as.character(case)
colnames(mat) <- as.character(vote)
df$chunk <- cumsum(df$V1 == "C")
for (i in 1:length(case)){
caseid <- df$V2[which((df$chunk == i) & (df$V1 == "C"))]
voteid <- df$V2[which((df$chunk == i) & (df$V1 == "V"))]
for (j in voteid){
mat[as.character(caseid), as.character(j)] <- 1
}
}
return(mat)
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
ms_mat <- function(df){
case <- df[df$V1=="C",2]
vote <- sort(unique(df[df$V1=="V",2]))
mat <- matrix(0, nrow=length(case), ncol=length(vote))
rownames(mat) <- as.character(case)
colnames(mat) <- as.character(vote)
df$chunk <- cumsum(df$V1 == "C")
for (i in 1:length(case)){
caseid <- df$V2[which((df$chunk == i) & (df$V1 == "C"))]
voteid <- df$V2[which((df$chunk == i) & (df$V1 == "V"))]
for (j in voteid){
mat[as.character(caseid), as.character(j)] <- 1
}
}
return(mat)
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
print(i,j,score)
print(i, j, score)
print(paste(i, j, score))
i
i =1
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
print(paste(i, j, score))
mat[as.character(i), as.character(j)] <- score
}
}
movie_mat <- function(df){
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
print(paste(i, j, score))
mat[as.character(i), as.character(j)] <- score
}
}
}
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
load("../output/movie_train_mat.RData")
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
View(movie_train)
View(movie_train_mat)
sum(is.na(movie_train_mat))
colSums(is.na(movie_train_mat))
s <- colSums(is.na(movie_train_mat))
df <- as.data.frame(mov)
df <- as.data.frame(movie_train_mat)
a <- matrix(rep(1:4),2,2)
a
colSums(a)
s = 0
s <- colSums(is.na(movie_train_mat))
which(s<=0)
which(s=0)
which(s==0)
which(s>0)
length(which(s>0))
a <- c(1,2,NA)
a
mean(a)
mean(a, na.rm = T)
mean(a, na.rm = F)
load("../output/ms_train_mat.RData")
load("../output/ms_test_mat.RData")
load("../output/movie_train_mat.RData")
load("../output/movie_test_mat.RData")
msd_weight <- function(df){
n <- dim(df)[1]
dissim <- matrix(NA, n, n)
user <- rownames(df)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
u_i <- df[i,]
u_j <- df[j,]
dissim[i,j] <- mean((u_i - u_j)^2, na.rm = T)
print(dissim[i,j])
}
}
L <- max(dissim)
w <- (L - dissim)/L
return (w)
}
msd_weight_ms <- msd_weight(ms_train_mat)
save(msd_weight_ms, file="../output/msd_weight_ms.RData")
setwd("~/Documents/GitHub/Spring2018-Project4-grp-8/lib")
save(msd_weight_movie, file="../output/msd_weight_movie.RData")
# movie
msd_weight_movie <- msd_weight(movie_train_mat)
save(msd_weight_movie, file="../output/msd_weight_movie.RData")
msd_weight_movie[1:10,1:10]
msd_weight_movie[1:1000,1:1000]
dissimilarity <- function(df){
n <- dim(df)[1]
dissim <- matrix(NA, n, n)
user <- rownames(df)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
u_i <- df[i,]
u_j <- df[j,]
dissim[i,j] <- mean((u_i - u_j)^2, na.rm = T)
}
}
return (dissim)
}
dissimilarity <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
u_i <- df[i,]
u_j <- df[j,]
dissim[i,j] <- mean((u_i - u_j)^2, na.rm = T)
}
}
return (dissim)
}
dissim <- dissimilarity(movie_train_mat)
dissimilarity <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
ui <- mat[i,]
uj <- mat[j,]
dissim[i,j] <- mean((ui - uj)^2, na.rm = T)
}
}
return (dissim)
}
dissimilarity <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
ui <- mat[i,]
uj <- mat[j,]
dissim[i,j] <- mean((ui - uj)^2, na.rm = T)
}
}
return (dissim)
}
dissim <- dissimilarity(movie_train_mat)
dissim <- dissimilarity(movie_train_mat[1:10,])
dissim
max(dissim)
L <- max(dissim)
w <- (L - dissim)/L
w
dissimilarity <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
ui <- mat[i,]
uj <- mat[j,]
dissim[i,j] <- mean((ui - uj)^2, na.rm = T)
}
}
L <- max(dissim)
w <- (L - dissim)/L
return (w)
}
msd_weight <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
ui <- mat[i,]
uj <- mat[j,]
dissim[i,j] <- mean((ui - uj)^2, na.rm = T)
}
}
L <- max(dissim)
w <- (L - dissim)/L
return (w)
}
msd_weight_movie <- msd_weight(movie_train_mat[1:10,])
msd_weight_movie
data <- data.frame(movie_train_mat)
View(data)
msd_weight_movie <- msd_weight(movie_train_mat[5000:5050,])
msd_weight_movie
msd_weight_movie <- msd_weight(movie_train_mat[1:1000,])
msd_weight_movie <- msd_weight(movie_train_mat[1:10,])
msd_weight_movie
load("../output/msd_weight_movie.RData")
msd_weight_movie[1:10]
msd_weight_movie[1:10,]
msd_weight_movie[1:10,1:10]
msd_weight <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
ui <- mat[i,]
uj <- mat[j,]
dissim[i,j] <- mean((ui - uj)^2, na.rm = T)
}
}
L <- max(dissim)
w <- (L - dissim)/L
return (list(dissim,w))
}
res <- msd_weight(movie_train_mat)
max(c(1,NA))
max(c(1,NA), na.rm = T)
msd_weight <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
ui <- mat[i,]
uj <- mat[j,]
dissim[i,j] <- mean((ui - uj)^2, na.rm = T)
}
}
L <- max(dissim, na.rm = T)
w <- (L - dissim)/L
return(w)
}
load("../output/ms_train_mat.RData")
load("../output/ms_test_mat.RData")
load("../output/movie_train_mat.RData")
load("../output/movie_test_mat.RData")
msd_weight <- function(mat){
n <- dim(mat)[1]
dissim <- matrix(NA, n, n)
user <- rownames(mat)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
ui <- mat[i,]
uj <- mat[j,]
dissim[i,j] <- mean((ui - uj)^2, na.rm = T)
}
}
L <- max(dissim, na.rm = T)
w <- (L - dissim)/L
return(w)
}
msd_weight_movie <- msd_weight(movie_train_mat)
save(msd_weight_movie, file="../output/msd_weight_movie.RData")
msd_weight_movie[1:10,1:10]
