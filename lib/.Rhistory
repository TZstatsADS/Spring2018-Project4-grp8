test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
# training error: mean cv test error
train_error[B] <- mean(test_error_cv)
# test error
ada <- adaBoost(Xtrain, ytrain, B)
alpha <- ada$alpha
allPars <- ada$allPars
c_hat_test <- agg_class(Xtest, alpha, allPars)
test_error[B] <- mean(ytest != c_hat_test)
}
x = seq(3)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
#cv
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
#cv training error
#c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
#train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
#cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
#training error: mean cv test error
train_error[B] <- mean(test_error_cv)
#test error
c_hat_test <- agg_class(Xtest, alpha[1:B,], allPars[1:B,])
test_error[B] <- mean(ytest != c_hat_test)
}
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
#cv
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
#cv training error
#c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
#train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
#cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
#training error: mean cv test error
train_error[B] <- mean(test_error_cv)
#test error
c_hat_test <- agg_class(Xtest, alpha[1:B], allPars[1:B])
test_error[B] <- mean(ytest != c_hat_test)
}
a = matrix(c(1,2,3,4),2,2)
a
mean(a)
colMeans(a)
rowMeans(a)
B_max = 10
#5-fold cv
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error_cv <- matrix(NA, nrow = B_max, ncol = k)
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B_max)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
for(B in 1:B_max){
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv[1:B], allPars_cv[1:B])
train_error_cv[B,i] <- mean(ytest_cv != c_hat_test_cv)
}
}
#training error: mean cv test error
train_error <- rep(NA, B_max)
train_error <- rowMeans(test_error_cv)
train_error_cv
train_error <- rep(NA, B_max)
train_error <- rowMeans(train_error_cv)
train_error
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
c_hat_test <- agg_class(Xtest, alpha[1:B], allPars[1:B])
test_error[B] <- mean(ytest != c_hat_test)
}
x = seq(100)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
x = seq(10)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
lines(x, test_error, col="red")
legend("topright", c("training error", "testing error"), lty=c(1,1), col=c("blue", "red"))
df <- movie_test
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
ms_mat <- function(df){
case <- df[df$V1=="C",2]
vote <- sort(unique(df[df$V1=="V",2]))
mat <- matrix(0, nrow=length(case), ncol=length(vote))
rownames(mat) <- as.character(case)
colnames(mat) <- as.character(vote)
df$chunk <- cumsum(df$V1 == "C")
for (i in 1:length(case)){
caseid <- df$V2[which((df$chunk == i) & (df$V1 == "C"))]
voteid <- df$V2[which((df$chunk == i) & (df$V1 == "V"))]
for (j in voteid){
mat[as.character(caseid), as.character(j)] <- 1
}
}
return(mat)
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
ms_mat <- function(df){
case <- df[df$V1=="C",2]
vote <- sort(unique(df[df$V1=="V",2]))
mat <- matrix(0, nrow=length(case), ncol=length(vote))
rownames(mat) <- as.character(case)
colnames(mat) <- as.character(vote)
df$chunk <- cumsum(df$V1 == "C")
for (i in 1:length(case)){
caseid <- df$V2[which((df$chunk == i) & (df$V1 == "C"))]
voteid <- df$V2[which((df$chunk == i) & (df$V1 == "V"))]
for (j in voteid){
mat[as.character(caseid), as.character(j)] <- 1
}
}
return(mat)
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
print(i,j,score)
print(i, j, score)
print(paste(i, j, score))
i
i =1
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
print(paste(i, j, score))
mat[as.character(i), as.character(j)] <- score
}
}
movie_mat <- function(df){
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
print(paste(i, j, score))
mat[as.character(i), as.character(j)] <- score
}
}
}
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
#ms
#load pkg and data
#install.packages("igraph")
library("igraph")
setwd("~/Documents/GitHub/Spring2018-Project4-grp-8/lib")
load("../output/ms_train_mat.RData")
#create the network graph
users <- rownames(ms_train_mat)
votes <- colnames(ms_train_mat)
nodes <- c(users, votes)
df_edges <- data.frame()
for (i in 1:length(users)){
sink <- names(which(ms_train_mat[i,]==1))
n_edges <- length(sink)
edges <- data.frame(rep(users[i],n_edges), sink)
colnames(edges) <- c("from","to")
df_edges <- rbind(df_edges, edges)
}
graph <- graph_from_data_frame(d=df_edges, vertices=nodes, directed=T)
graph
A <- as_adjacency_matrix(graph)
A <- as.matrix(A, "adjacency")
W <- scale(A, center=FALSE, scale=colSums(A))
I <- diag(length(nodes))
S <- diag(length(nodes))
a = matr
a = matrix(c(1:4),2,2)
a
t(a)
X <- t(W) %*% S %*% W
X[1,4152]
nodes <- c("A","B")
edges <- data.frame(c("A","A","A","B","B","B"),
c("sugar","frosting","eggs","frosting","eggs","flour"))
graph <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
graph
nodes <- c("A","B")
edges <- data.frame(c("A","A","A","B","B","B"),
)
edges <- data.frame(c("A","A","A","B","B","B"),
c("sugar","frosting","eggs","frosting","eggs","flour"))
edges
View(edges)
colnames(edges) <- c("from","to")
View(edges)
graph <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
nodes <- c("A","B","sugar","frosting","eggs","flour")
edges <- data.frame(c("A","A","A","B","B","B"),
c("sugar","frosting","eggs","frosting","eggs","flour"))
colnames(edges) <- c("from","to")
graph <- graph_from_data_frame(d=edges, vertices=nodes, directed=T)
graph
plot(graph)
A <- as_adjacency_matrix(graph)
A
A <- as.matrix(A, "adjacency")
A
W <- scale(A, center=FALSE, scale=colSums(A))
W
A
plot(graph)
graph <- graph_from_data_frame(d=edges, vertices=nodes)
graph
plot(graph)
graph <- graph_from_data_frame(d=edges, vertices=nodes, directed=F)
graph
plot(graph)
A <- as_adjacency_matrix(graph)
A <- as.matrix(A, "adjacency")
A
W <- scale(A, center=FALSE, scale=colSums(A))
W
S <- diag(length(nodes))
C=0.8
X <- t(W) %*% S %*% W
X
S = C*X-C*diag(X) + I
C*X
C*diag(X)
S = C*X %-% C*diag(X) + I
C*X - C*diag(X)
diag(X)
library("Matrix")
Diagonal(X)
d <-diag(X)
D = v = Diagonal(n=length(d), x=d)
D
C*X - C*D
D = I
diag(D) <- diag(X)
D
I <- diag(length(nodes))
S <- diag(length(nodes))
D = I
diag(D) <- diag(X)
D
S = C*X - C*D + I
S
A
D = Diagonal(n=length(d), x=d)
D
S = C*X - C*D + I
S
S <- C*X - C*D + I
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
S
##ms
#load pkg and data
#install.packages("igraph")
library("igraph")
setwd("~/Documents/GitHub/Spring2018-Project4-grp-8/lib")
load("../output/ms_train_mat.RData")
#create the network graph
users <- rownames(ms_train_mat)
votes <- colnames(ms_train_mat)
nodes <- c(users, votes)
df_edges <- data.frame()
for (i in 1:length(users)){
sink <- names(which(ms_train_mat[i,]==1))
n_edges <- length(sink)
edges <- data.frame(rep(users[i],n_edges), sink)
colnames(edges) <- c("from","to")
df_edges <- rbind(df_edges, edges)
}
graph <- graph_from_data_frame(d=df_edges, vertices=nodes, directed=F)
graph
simrank <- function(C = 0.8, K = 5){
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
}
}
S
simrank <- function(C = 0.8, K = 5){
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
print(S)
}
}
print(S)
simrank <- function(C = 0.8, K = 5){
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
print(S)
}
}
simrank()
get_votes <- function(user){
votes <- neighbors(graph, user, mode = "out")
return(votes)
}
get_users <- function(vote){
users <- neighbors(graph, vote, mode = "in")
return(users)
}
get_votes(users[1])
get_users(votes[1])
simrank <- function(C = 0.8, K = 5){
simrankList <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
simrankList[[i]] <- S
}
}
simrank()
simrankList
simrank <- function(C = 0.8, K = 5){
simrankList <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
simrankList[[i]] <- S
}
}
simrank()
simrank <- function(C = 0.8, K = 5){
res <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
res[[k]] <- S
}
}
simrank()
res
simrank <- function(C = 0.8, K = 5){
res <- list()
print(res)
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
res[[k]] <- S
}
}
simrank()
res
simrank()
res
res <- list()
res[[1]] <- S
res
simrank <- function(C = 0.8, K = 5){
res <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
print(k)
res[[k]] <- S
}
}
simrank()
simrank <- function(C = 0.8, K = 5){
res <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
print(k)
res[[k]] <- 1
}
}
simrank()
res[[1]] <- S
res[[2]] <- S
res
simrank <- function(C = 0.8, K = 5){
res <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
print(k)
res[[k]] <- S
}
}
simrank()
