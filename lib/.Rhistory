Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
# cv training error
c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
# cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
# training error: mean cv test error
train_error[B] <- mean(test_error_cv)
# test error
ada <- adaBoost(Xtrain, ytrain, B)
alpha <- ada$alpha
allPars <- ada$allPars
c_hat_test <- agg_class(Xtest, alpha, allPars)
test_error[B] <- mean(ytest != c_hat_test)
}
#train(X, w, y)
train <- function(X, w, y) {
n <- nrow(X)
p <- ncol(X)
costList = rep(NA, p)
thetaList = rep(NA, p)
mList = rep(1, p)
for (j in 1:p) {
x_j <- X[,j]
unique_x_j <- unique(x_j)
unique_x_j <- c(unique_x_j, -2)
#compute cost
cost <- function(theta, Xvec, Yvec, number, weights) {
classified <- rep(-1, number)
classified[Xvec > theta] = 1
c <- sum(weights*(classified != Yvec))
return(c)
}
costN <- function(theta, Xvec, Yvec, number, weights) {
classified <- rep(1, number)
classified[Xvec > theta] = -1
cN <- sum(weights*(classified != Yvec))
return(cN)
}
c <- apply(matrix(unique_x_j), 1, cost, Xvec=x_j, Yvec=y,
number=n, weights=w)
cN <- apply(matrix(unique_x_j), 1, costN, Xvec=x_j, Yvec=y,
number=n, weights=w)
#min cost
if (min(cN) < min(c)) {
ind <- which.min(cN)
costList[j] <- cN[ind]
mList[j] <- -1
} else {
ind <- which.min(c)
costList[j] <- c[ind]
}
thetaList[j] <- unique_x_j[ind]
}
#j_star
j_star <- which.min(costList)
pars <- list(j=j_star, theta = thetaList[j_star], m = mList[j_star])
return(pars)
}
#classify(X, pars)
classify <- function(X, pars){
j <- pars$j
theta <- pars$theta
m <- pars$m
x_j <- X[,j]
#label = sign(m*(x_j-theta))
label <- rep(-m, nrow(X))
label[x_j>theta] = m
return(label)
}
#agg_class(X, alpha, allPars)
agg_class <- function(X, alpha, allPars) {
n <- nrow(X)
B <- length(alpha)
label <- matrix(0, n, 1)
if (B == 1) {
allPars <- rbind(allPars, matrix(0,1,3))
}
for (b in seq(B)) {
label <- label + alpha[b] * classify(X, allPars[[b]])
}
c_hat <- sign(label)
return(c_hat)
}
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
# cv
for (i in seq(k)) {
# split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
# cv training error
c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
# cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
# training error: mean cv test error
train_error[B] <- mean(test_error_cv)
# test error
ada <- adaBoost(Xtrain, ytrain, B)
alpha <- ada$alpha
allPars <- ada$allPars
c_hat_test <- agg_class(Xtest, alpha, allPars)
test_error[B] <- mean(ytest != c_hat_test)
}
x = seq(3)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
#cv
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
#cv training error
#c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
#train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
#cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
#training error: mean cv test error
train_error[B] <- mean(test_error_cv)
#test error
c_hat_test <- agg_class(Xtest, alpha[1:B,], allPars[1:B,])
test_error[B] <- mean(ytest != c_hat_test)
}
B_max = 10
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error <- rep(NA, B_max)
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
train_error_cv = rep(NA, k)
test_error_cv = rep(NA, k)
#cv
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
#cv training error
#c_hat_train_cv <- agg_class(Xtrain_cv, alpha_cv, allPars_cv)
#train_error_cv[i] <- mean(ytrain_cv != c_hat_train_cv)
#cv test error
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv, allPars_cv)
test_error_cv[i] <- mean(ytest_cv != c_hat_test_cv)
}
#training error: mean cv test error
train_error[B] <- mean(test_error_cv)
#test error
c_hat_test <- agg_class(Xtest, alpha[1:B], allPars[1:B])
test_error[B] <- mean(ytest != c_hat_test)
}
a = matrix(c(1,2,3,4),2,2)
a
mean(a)
colMeans(a)
rowMeans(a)
B_max = 10
#5-fold cv
k = 5
nums <- rep(1:k, each = nrow(Xtrain)/k)
fold <- sample(nums)
train_error_cv <- matrix(NA, nrow = B_max, ncol = k)
for (i in seq(k)) {
#split data
Xtest_cv  <- Xtrain[fold == i, ]
ytest_cv <- ytrain[fold == i]
Xtrain_cv <- Xtrain[fold != i, ]
ytrain_cv <- ytrain[fold != i]
ada_cv <- adaBoost(Xtrain_cv, ytrain_cv, B_max)
alpha_cv <- ada_cv$alpha
allPars_cv <- ada_cv$allPars
for(B in 1:B_max){
c_hat_test_cv <- agg_class(Xtest_cv, alpha_cv[1:B], allPars_cv[1:B])
train_error_cv[B,i] <- mean(ytest_cv != c_hat_test_cv)
}
}
#training error: mean cv test error
train_error <- rep(NA, B_max)
train_error <- rowMeans(test_error_cv)
train_error_cv
train_error <- rep(NA, B_max)
train_error <- rowMeans(train_error_cv)
train_error
test_error <- rep(NA, B_max)
ada <- adaBoost(Xtrain, ytrain, B_max)
alpha <- ada$alpha
allPars <- ada$allPars
for(B in 1:B_max){
c_hat_test <- agg_class(Xtest, alpha[1:B], allPars[1:B])
test_error[B] <- mean(ytest != c_hat_test)
}
x = seq(100)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
x = seq(10)
plot(x, train_error, type="l",col="blue", xlab = "B", ylab = "error rate")
lines(x, test_error, col="red")
legend("topright", c("training error", "testing error"), lty=c(1,1), col=c("blue", "red"))
df <- movie_test
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
ms_mat <- function(df){
case <- df[df$V1=="C",2]
vote <- sort(unique(df[df$V1=="V",2]))
mat <- matrix(0, nrow=length(case), ncol=length(vote))
rownames(mat) <- as.character(case)
colnames(mat) <- as.character(vote)
df$chunk <- cumsum(df$V1 == "C")
for (i in 1:length(case)){
caseid <- df$V2[which((df$chunk == i) & (df$V1 == "C"))]
voteid <- df$V2[which((df$chunk == i) & (df$V1 == "V"))]
for (j in voteid){
mat[as.character(caseid), as.character(j)] <- 1
}
}
return(mat)
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
ms_mat <- function(df){
case <- df[df$V1=="C",2]
vote <- sort(unique(df[df$V1=="V",2]))
mat <- matrix(0, nrow=length(case), ncol=length(vote))
rownames(mat) <- as.character(case)
colnames(mat) <- as.character(vote)
df$chunk <- cumsum(df$V1 == "C")
for (i in 1:length(case)){
caseid <- df$V2[which((df$chunk == i) & (df$V1 == "C"))]
voteid <- df$V2[which((df$chunk == i) & (df$V1 == "V"))]
for (j in voteid){
mat[as.character(caseid), as.character(j)] <- 1
}
}
return(mat)
}
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
mat[as.character(i), as.character(j)] <- score
}
}
print(i,j,score)
print(i, j, score)
print(paste(i, j, score))
i
i =1
df <- movie_test
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
print(paste(i, j, score))
mat[as.character(i), as.character(j)] <- score
}
}
movie_mat <- function(df){
movie <- sort(unique(df$Movie))
user <- unique(df$User)
mat <- matrix(NA, nrow=length(user), ncol=length(movie))
rownames(mat) <- as.character(user)
colnames(mat) <- as.character(movie)
for (i in user){
movieid <- df$Movie[which(df$User == i)]
for (j in movieid){
score <- df$Score[which((df$User == i) & (df$Movie == j))]
print(paste(i, j, score))
mat[as.character(i), as.character(j)] <- score
}
}
}
#ms
ms_train <- read.csv("../data/MS_sample/data_train.csv")[,-1]
ms_test <- read.csv("../data/MS_sample/data_test.csv")[,-1]
#movie
movie_train <- read.csv("../data/eachmovie_sample/data_train.csv")[,-1]
movie_test <- read.csv("../data/eachmovie_sample/data_test.csv")[,-1]
##ms
#load pkg and data
library("igraph")
setwd("~/Documents/GitHub/Spring2018-Project4-grp-8/lib")
load("../output/ms_train_mat.RData")
#create the network graph
users <- rownames(ms_train_mat)
votes <- colnames(ms_train_mat)
nodes <- c(users, votes)
df_edges <- data.frame()
for (i in 1:length(users)){
sink <- names(which(ms_train_mat[i,]==1))
n_edges <- length(sink)
edges <- data.frame(rep(users[i],n_edges), sink)
colnames(edges) <- c("from","to")
df_edges <- rbind(df_edges, edges)
}
graph <- graph_from_data_frame(d=df_edges, vertices=nodes, directed=F)
graph
save(graph, file="../output/graph_ms.RData")
##matrix representation of SimRank
#adjacency matrix
A <- as_adjacency_matrix(graph)
A <- as.matrix(A, "adjacency")
#normalized by columns
W <- scale(A, center=FALSE, scale=colSums(A))
I <- diag(length(nodes))
S <- diag(length(nodes))
simrank <- function(C = 0.8, K = 5){
res <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
res[[k]] <- S
}
return(res)
}
simrank <- function(C = 0.8, K = 5){
res <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
res[[k]] <- S
print(S)
}
return(res)
}
res <- simrank()
simrank_weight_ms <- res[[5]]
simrank_weight_ms <- res[[5]][1:4151,1:4151]
simrank_weight_ms[4150:4151,4150:4151]
res[[5]][4150:4152,4150:4152]
res[[5]][4150:4153,4150:4153]
simrank_weight_ms <- res[[5]][1:4151,1:4151]
save(spearman_weight_movie, file="../output/spearman_weight_movie.RData")
simrank_weight_ms <- res[[5]][1:4151,1:4151]
save(simrank_weight_ms, file="../output/simrank_weight_ms.RData")
View(simrank_weight_ms)
simrank_weight <- simrank_weight_ms
save(simrank_weight, file="../output/simrank_weight_ms.RData")
load("../output/graph_ms.RData")
load("../output/graph_ms.RData")
##matrix representation of SimRank
#adjacency matrix
A <- as_adjacency_matrix(graph)
A <- as.matrix(A, "adjacency")
#normalized by columns
W <- scale(A, center=FALSE, scale=colSums(A))
I <- diag(length(nodes))
#create the network graph
users <- rownames(ms_train_mat)
load("../output/ms_train_mat.RData")
load("../output/ms_test_mat.RData")
load("../output/movie_train_mat.RData")
load("../output/movie_test_mat.RData")
#create the network graph
users <- rownames(ms_train_mat)
votes <- colnames(ms_train_mat)
nodes <- c(users, votes)
df_edges <- data.frame()
for (i in 1:length(users)){
sink <- names(which(ms_train_mat[i,]==1))
n_edges <- length(sink)
edges <- data.frame(rep(users[i],n_edges), sink)
colnames(edges) <- c("from","to")
df_edges <- rbind(df_edges, edges)
}
graph <- graph_from_data_frame(d=df_edges, vertices=nodes, directed=F)
graph
save(graph, file="../output/graph_ms.RData")
#adjacency matrix
A <- as_adjacency_matrix(graph)
A <- as.matrix(A, "adjacency")
#normalized by columns
W <- scale(A, center=FALSE, scale=colSums(A))
I <- diag(length(nodes))
S <- diag(length(nodes))
simrank <- function(C = 0.8, K = 5){
res <- list()
for (k in 1:K){
X <- t(W) %*% S %*% W
D <- I
diag(D) <- diag(X)
S <- C*X - C*D + I
res[[k]] <- S
}
return(res)
}
#res <- simrank()
#simrank_weight <- res[[5]][1:4151,1:4151]
#save(simrank_weight, file="../output/simrank_weight_ms.RData")
load("../output/simrank_weight_ms.RData")
#ms
spearman_weight_ms <- cor(t(ms_train_mat), method = "spearman")
save(spearman_weight_ms, file="../output/spearman_weight_ms.RData")
#movie
spearman_weight_movie <- cor(t(movie_train_mat), method = "spearman")
save(spearman_weight_movie, file="../output/spearman_weight_movie.RData")
msd_weight <- function(df){
n <- dim(df)[1]
dissim <- matrix(NA, n, n)
user <- rownames(df)
colnames(dissim) <- user
rownames(dissim) <- user
for (i in 1:n){
for (j in 1:n){
u_i <- df[i,]
u_j <- df[j,]
dissim[i,j] <- mean((u_i - u_j)^2)
}
}
L <- max(dissim)
w <- (L - dissim)/L
return (w)
}
#ms
msd_weight_ms <- msd_weight(ms_train_mat)
save(msd_weight_ms, file="../output/msd_weight_ms.RData")
#movie
msd_weight_movie <- msd_weight(movie_train_mat)
save(msd_weight_movie, file="../output/msd_weight_movie.RData")
